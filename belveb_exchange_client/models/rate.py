# coding: utf-8

"""
    Bel VEB exchange rates

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from belveb_exchange_client.configuration import Configuration


class Rate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'date': 'str',
        'department': 'str',
        'currency': 'str',
        'currency_code': 'str',
        'buying_rate': 'str',
        'selling_rate': 'str',
        'quantity': 'str'
    }

    attribute_map = {
        'date': 'date',
        'department': 'department',
        'currency': 'currency',
        'currency_code': 'currencyCode',
        'buying_rate': 'buyingRate',
        'selling_rate': 'sellingRate',
        'quantity': 'quantity'
    }

    def __init__(self, date=None, department=None, currency=None, currency_code=None, buying_rate=None, selling_rate=None, quantity=None, local_vars_configuration=None):  # noqa: E501
        """Rate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._date = None
        self._department = None
        self._currency = None
        self._currency_code = None
        self._buying_rate = None
        self._selling_rate = None
        self._quantity = None
        self.discriminator = None

        if date is not None:
            self.date = date
        if department is not None:
            self.department = department
        if currency is not None:
            self.currency = currency
        if currency_code is not None:
            self.currency_code = currency_code
        if buying_rate is not None:
            self.buying_rate = buying_rate
        if selling_rate is not None:
            self.selling_rate = selling_rate
        if quantity is not None:
            self.quantity = quantity

    @property
    def date(self):
        """Gets the date of this Rate.  # noqa: E501


        :return: The date of this Rate.  # noqa: E501
        :rtype: str
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this Rate.


        :param date: The date of this Rate.  # noqa: E501
        :type date: str
        """

        self._date = date

    @property
    def department(self):
        """Gets the department of this Rate.  # noqa: E501


        :return: The department of this Rate.  # noqa: E501
        :rtype: str
        """
        return self._department

    @department.setter
    def department(self, department):
        """Sets the department of this Rate.


        :param department: The department of this Rate.  # noqa: E501
        :type department: str
        """

        self._department = department

    @property
    def currency(self):
        """Gets the currency of this Rate.  # noqa: E501


        :return: The currency of this Rate.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Rate.


        :param currency: The currency of this Rate.  # noqa: E501
        :type currency: str
        """
        allowed_values = ["USD", "RUR", "EUR", "USD/RUR", "EUR/RUR", "CAD/USD", "GBP/USD", "EUR/USD"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and currency not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `currency` ({0}), must be one of {1}"  # noqa: E501
                .format(currency, allowed_values)
            )

        self._currency = currency

    @property
    def currency_code(self):
        """Gets the currency_code of this Rate.  # noqa: E501


        :return: The currency_code of this Rate.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this Rate.


        :param currency_code: The currency_code of this Rate.  # noqa: E501
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def buying_rate(self):
        """Gets the buying_rate of this Rate.  # noqa: E501


        :return: The buying_rate of this Rate.  # noqa: E501
        :rtype: str
        """
        return self._buying_rate

    @buying_rate.setter
    def buying_rate(self, buying_rate):
        """Sets the buying_rate of this Rate.


        :param buying_rate: The buying_rate of this Rate.  # noqa: E501
        :type buying_rate: str
        """

        self._buying_rate = buying_rate

    @property
    def selling_rate(self):
        """Gets the selling_rate of this Rate.  # noqa: E501


        :return: The selling_rate of this Rate.  # noqa: E501
        :rtype: str
        """
        return self._selling_rate

    @selling_rate.setter
    def selling_rate(self, selling_rate):
        """Sets the selling_rate of this Rate.


        :param selling_rate: The selling_rate of this Rate.  # noqa: E501
        :type selling_rate: str
        """

        self._selling_rate = selling_rate

    @property
    def quantity(self):
        """Gets the quantity of this Rate.  # noqa: E501


        :return: The quantity of this Rate.  # noqa: E501
        :rtype: str
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this Rate.


        :param quantity: The quantity of this Rate.  # noqa: E501
        :type quantity: str
        """

        self._quantity = quantity

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Rate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Rate):
            return True

        return self.to_dict() != other.to_dict()
