# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from belveb_exchange_client.models.base_model_ import Model
from belveb_exchange_client import util


class Rate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, date: str=None, department: str=None, currency: str=None, currency_code: str=None, buying_rate: str=None, selling_rate: str=None, quantity: str=None):
        """Rate - a model defined in OpenAPI

        :param date: The date of this Rate.
        :param department: The department of this Rate.
        :param currency: The currency of this Rate.
        :param currency_code: The currency_code of this Rate.
        :param buying_rate: The buying_rate of this Rate.
        :param selling_rate: The selling_rate of this Rate.
        :param quantity: The quantity of this Rate.
        """
        self.openapi_types = {
            'date': str,
            'department': str,
            'currency': str,
            'currency_code': str,
            'buying_rate': str,
            'selling_rate': str,
            'quantity': str
        }

        self.attribute_map = {
            'date': 'date',
            'department': 'department',
            'currency': 'currency',
            'currency_code': 'currencyCode',
            'buying_rate': 'buyingRate',
            'selling_rate': 'sellingRate',
            'quantity': 'quantity'
        }

        self._date = date
        self._department = department
        self._currency = currency
        self._currency_code = currency_code
        self._buying_rate = buying_rate
        self._selling_rate = selling_rate
        self._quantity = quantity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Rate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Rate of this Rate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def date(self):
        """Gets the date of this Rate.


        :return: The date of this Rate.
        :rtype: str
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this Rate.


        :param date: The date of this Rate.
        :type date: str
        """

        self._date = date

    @property
    def department(self):
        """Gets the department of this Rate.


        :return: The department of this Rate.
        :rtype: str
        """
        return self._department

    @department.setter
    def department(self, department):
        """Sets the department of this Rate.


        :param department: The department of this Rate.
        :type department: str
        """

        self._department = department

    @property
    def currency(self):
        """Gets the currency of this Rate.


        :return: The currency of this Rate.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Rate.


        :param currency: The currency of this Rate.
        :type currency: str
        """
        allowed_values = ["USD", "RUR", "EUR", "USD/RUR", "EUR/RUR", "CAD/USD", "GBP/USD", "EUR/USD"]  # noqa: E501
        if currency not in allowed_values:
            raise ValueError(
                "Invalid value for `currency` ({0}), must be one of {1}"
                .format(currency, allowed_values)
            )

        self._currency = currency

    @property
    def currency_code(self):
        """Gets the currency_code of this Rate.


        :return: The currency_code of this Rate.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this Rate.


        :param currency_code: The currency_code of this Rate.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def buying_rate(self):
        """Gets the buying_rate of this Rate.


        :return: The buying_rate of this Rate.
        :rtype: str
        """
        return self._buying_rate

    @buying_rate.setter
    def buying_rate(self, buying_rate):
        """Sets the buying_rate of this Rate.


        :param buying_rate: The buying_rate of this Rate.
        :type buying_rate: str
        """

        self._buying_rate = buying_rate

    @property
    def selling_rate(self):
        """Gets the selling_rate of this Rate.


        :return: The selling_rate of this Rate.
        :rtype: str
        """
        return self._selling_rate

    @selling_rate.setter
    def selling_rate(self, selling_rate):
        """Sets the selling_rate of this Rate.


        :param selling_rate: The selling_rate of this Rate.
        :type selling_rate: str
        """

        self._selling_rate = selling_rate

    @property
    def quantity(self):
        """Gets the quantity of this Rate.


        :return: The quantity of this Rate.
        :rtype: str
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this Rate.


        :param quantity: The quantity of this Rate.
        :type quantity: str
        """

        self._quantity = quantity
